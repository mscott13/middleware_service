using middleware_service.Other_Classes;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace middleware_service.TableDependencyDefinitions
{
    class SqlNotify_ArInvoices
    {
        public void TransferToGeneric(string database)
        {
            string query= "INSERT INTO dbo.tblARInvoices "+
                        "(Invoice#,Batch#,Ref#,Date1,DebitGLID,Amount,ARBalance,CustomerID,Processed,Author,PO#,ToApply,AdjustmentAmount " +
                        ",GLUpdateDate,Job#,SalesmanID,DocType,DueDate,FCDate,DiscountDate,DTotal,NextPostingDate,notes,InvoiceCreationDate " +
                        ",Transferred,Quarter,Year,FeeTaxesId,relatedInvoice,DocId,LiqNum,NotificationId,LegalStatus,Form,ResolutionNum " +
                        ",Printed,ARGLID,Exported,ExportDate,InternationalID,InternationalAmount,FeeType,ExchangeRate,EndofPeriodInvoiced " +
                        ",Remarks,isvoided,canceledDate,canceledBy,subType,LicensevalidityHistoryID,LogId,AutoGenerated,reasonforCancellation " +
                        ",PurchaseOrder,ExportedToEpayment,EpaymentExportDate,InvoiceType,Proj,InvoiceCode,BalanceForward,IDINVC) " +


                        "VALUES(@Invoice#,@Batch#,@Ref#,@Date1,@DebitGLID,@Amount,@ARBalance,@CustomerID,@Processed,@Author,@PO#,@ToApply " +
                        ",@AdjustmentAmount, @GLUpdateDate, @Job#,@SalesmanID,@DocType,@DueDate,@FCDate,@DiscountDate,@DTotal,@NextPostingDate " +
                        ",@notes, @InvoiceCreationDate, @Transferred, @Quarter, @Year, @FeeTaxesId, @relatedInvoice, @DocId, @LiqNum, @NotificationId " +
                        ",@LegalStatus, @Form, @ResolutionNum, @Printed, @ARGLID, @Exported, @ExportDate, @InternationalID, @InternationalAmount, @FeeType " +
                        ",@ExchangeRate, @EndofPeriodInvoiced, @Remarks, @isvoided, @canceledDate, @canceledBy, @subType, @LicensevalidityHistoryID " +
                        ",@LogId, @AutoGenerated, @reasonforCancellation, @PurchaseOrder, @ExportedToEpayment, @EpaymentExportDate, @InvoiceType, @Proj " +
                        ",@InvoiceCode, @BalanceForward, @IDINVC)";

            canceledBy = fixNulls(canceledBy);
            notes = fixNulls(notes);
            FeeType = fixNulls(FeeType);
            Ref = fixNulls(Ref);
            Author = fixNulls(Author);
            PO = fixNulls(PO);
            Job = fixNulls(Job);
            LiqNum = fixNulls(LiqNum);
            Form = fixNulls(Form);
            ResolutionNum = fixNulls(ResolutionNum);
            Printed = fixNulls(Printed);
            Remarks = fixNulls(Remarks);
            reasonforCancellation = fixNulls(reasonforCancellation);
            PurchaseOrder = fixNulls(PurchaseOrder);
            Proj = fixNulls(Proj);
            InvoiceCode = fixNulls(InvoiceCode);
            IDINVC = fixNulls(IDINVC);

            SqlConnection conn = new SqlConnection(database);
            conn.Open();

            SqlCommand cmd = new SqlCommand();
            cmd.Connection = conn;
            cmd.CommandText = query;

            try
            {
                cmd.Parameters.AddWithValue("@Invoice#", Invoice);
                cmd.Parameters.AddWithValue("@Batch#", Batch);
                cmd.Parameters.AddWithValue("@Ref#", Ref);
                cmd.Parameters.AddWithValue("@Date1", Date1);
                cmd.Parameters.AddWithValue("@DebitGLID", DebitGLID);
                cmd.Parameters.AddWithValue("@Amount", Amount);
                cmd.Parameters.AddWithValue("@ARBalance", ARBalance);
                cmd.Parameters.AddWithValue("@CustomerID", CustomerID);
                cmd.Parameters.AddWithValue("@Processed", Processed);
                cmd.Parameters.AddWithValue("@Author", Author);
                cmd.Parameters.AddWithValue("@PO#", PO);
                cmd.Parameters.AddWithValue("@ToApply", ToApply);
                cmd.Parameters.AddWithValue("@AdjustmentAmount", AdjustmentAmount);
                cmd.Parameters.AddWithValue("@GLUpdateDate", GLUpdateDate);
                cmd.Parameters.AddWithValue("@Job#", Job);
                cmd.Parameters.AddWithValue("@SalesmanID", SalesmanID);
                cmd.Parameters.AddWithValue("@DocType", DocType);
                cmd.Parameters.AddWithValue("@DueDate", DueDate);
                cmd.Parameters.AddWithValue("@FCDate", FCDate);
                cmd.Parameters.AddWithValue("@DiscountDate", DiscountDate);
                cmd.Parameters.AddWithValue("@DTotal", DTotal);
                cmd.Parameters.AddWithValue("@NextPostingDate", NextPostingDate);
                cmd.Parameters.AddWithValue("@notes", notes);
                cmd.Parameters.AddWithValue("@InvoiceCreationDate", InvoiceCreationDate);
                cmd.Parameters.AddWithValue("@Transferred", Transferred);
                cmd.Parameters.AddWithValue("@Quarter", Quarter);
                cmd.Parameters.AddWithValue("@Year", Year);
                cmd.Parameters.AddWithValue("@FeeTaxesId", FeeTaxesId);
                cmd.Parameters.AddWithValue("@relatedInvoice", relatedInvoice);
                cmd.Parameters.AddWithValue("@DocId", DocId);
                cmd.Parameters.AddWithValue("@LiqNum", LiqNum);
                cmd.Parameters.AddWithValue("@NotificationId", NotificationId);
                cmd.Parameters.AddWithValue("@LegalStatus", LegalStatus);
                cmd.Parameters.AddWithValue("@Form", Form);
                cmd.Parameters.AddWithValue("@ResolutionNum", ResolutionNum);
                cmd.Parameters.AddWithValue("@Printed", Printed);
                cmd.Parameters.AddWithValue("@ARGLID", ARGLID);
                cmd.Parameters.AddWithValue("@Exported", Exported);
                cmd.Parameters.AddWithValue("@ExportDate", ExportDate);
                cmd.Parameters.AddWithValue("@InternationalID", InternationalID);
                cmd.Parameters.AddWithValue("@InternationalAmount", InternationalAmount);
                cmd.Parameters.AddWithValue("@FeeType", FeeType);
                cmd.Parameters.AddWithValue("@ExchangeRate", ExchangeRate);
                cmd.Parameters.AddWithValue("@EndofPeriodInvoiced", EndofPeriodInvoiced);
                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                cmd.Parameters.AddWithValue("@isvoided", isVoided);
                cmd.Parameters.AddWithValue("@canceledDate", canceledDate);
                cmd.Parameters.AddWithValue("@canceledBy", canceledBy);
                cmd.Parameters.AddWithValue("@subType", subType);
                cmd.Parameters.AddWithValue("@LicensevalidityHistoryID", LicensevalidityHistoryID);
                cmd.Parameters.AddWithValue("@LogId", LogId);
                cmd.Parameters.AddWithValue("@AutoGenerated", AutoGenerated);
                cmd.Parameters.AddWithValue("@reasonforCancellation", reasonforCancellation);
                cmd.Parameters.AddWithValue("@PurchaseOrder", PurchaseOrder);
                cmd.Parameters.AddWithValue("@ExportedToEpayment", ExportedToEpayment);
                cmd.Parameters.AddWithValue("@EpaymentExportDate", EpaymentExportDate);
                cmd.Parameters.AddWithValue("@InvoiceType", InvoiceType);
                cmd.Parameters.AddWithValue("@Proj", Proj);
                cmd.Parameters.AddWithValue("@InvoiceCode", InvoiceCode);
                cmd.Parameters.AddWithValue("@BalanceForward", BalanceForward);
                cmd.Parameters.AddWithValue("@IDINVC", IDINVC);
                cmd.ExecuteNonQuery();
            }
            catch (Exception e)
            {
                Log.Save(e.Message + " " + e.StackTrace);
            }
            conn.Close();
        }

        private string fixNulls(string input)
        {
            if (input == null)
            {
                return "";
            }
            else
            {
                return input;
            }
        }
        public int ARInvoiceID { get; set; }
        public decimal Amount { get; set; }
        public int isVoided { get; set; }
        public string canceledBy { get; set; }
        public int CustomerID { get; set; }
        public string notes { get; set; }
        public string FeeType { get; set; }
        public int Invoice { get; set; }
        public int Batch { get; set; }
        public string Ref { get; set; }
        public DateTime Date1 { get; set; }
        public int DebitGLID { get; set; }
        public decimal ARBalance { get; set; }
        public bool Processed { get; set; }
        public string Author { get; set; }
        public string PO { get; set; }
        public decimal ToApply { get; set; }
        public decimal AdjustmentAmount { get; set; }
        public DateTime GLUpdateDate { get; set; }
        public string Job { get; set; }
        public int SalesmanID { get; set; }
        public int DocType { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime FCDate { get; set; }
        public DateTime DiscountDate { get; set; }
        public decimal DTotal { get; set; }
        public DateTime NextPostingDate { get; set; }
        public DateTime InvoiceCreationDate { get; set; }
        public bool Transferred { get; set; }
        public int Quarter { get; set; }
        public int Year { get; set; }
        public int FeeTaxesId { get; set; }
        public int relatedInvoice { get; set; }
        public int DocId { get; set; }
        public string LiqNum { get; set; }
        public int NotificationId { get; set; }
        public string LegalStatus { get; set; }
        public string Form { get; set; }
        public string ResolutionNum { get; set; }
        public string Printed { get; set; }
        public int ARGLID { get; set; }
        public bool Exported { get; set; }
        public DateTime ExportDate { get; set; }
        public int InternationalID { get; set; }
        public decimal InternationalAmount { get; set; }
        public decimal ExchangeRate { get; set; }
        public DateTime EndofPeriodInvoiced { get; set; }
        public string Remarks { get; set; }
        public DateTime canceledDate { get; set; }
        public int subType { get; set; }
        public int LicensevalidityHistoryID { get; set; }
        public int LogId { get; set; }
        public bool AutoGenerated { get; set; }
        public string reasonforCancellation { get; set; }
        public string PurchaseOrder { get; set; }
        public bool ExportedToEpayment { get; set; }
        public DateTime EpaymentExportDate { get; set; }
        public int InvoiceType { get; set; }
        public string Proj { get; set; }
        public string InvoiceCode { get; set; }
        public decimal BalanceForward { get; set; }
        public string IDINVC { get; set; }
    }
}


